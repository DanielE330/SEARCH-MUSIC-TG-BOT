import os
import telebot
from telebot import types
from yandex_music import Client
import datetime
import logging

logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    filename='music_bot.log'
)
logger = logging.getLogger(__name__)

bot = telebot.TeleBot('TOKEN_TG')
client = Client('TOKEN_YA.MUSIC')
client.init()

user_search_results = {}

@bot.message_handler(commands=['start', 'help'])
def send_welcome(message):
    welcome_text = (
        "üéµ –ü—Ä–∏–≤–µ—Ç, –º–µ–ª–æ–º–∞–Ω–∞! üéß\n"
        "–Ø - —Ç–≤–æ–π –º—É–∑—ã–∫–∞–ª—å–Ω—ã–π –≥–∏–¥. –ü—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à–∏ –º–Ω–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –ø–µ—Å–Ω–∏ –∏–ª–∏ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è, "
        "–∏ —è –Ω–∞–π–¥—É –¥–ª—è —Ç–µ–±—è —ç—Ç—É –∫–æ–º–ø–æ–∑–∏—Ü–∏—é!\n\n"
        "–ü—Ä–∏–º–µ—Ä—ã –∑–∞–ø—Ä–æ—Å–æ–≤:\n"
        "‚Ä¢ 'The Weeknd Blinding Lights'\n"
        "‚Ä¢ '–ö–∏–Ω–æ –ì—Ä—É–ø–ø–∞ –∫—Ä–æ–≤–∏'\n"
        "‚Ä¢ 'Queen Bohemian Rhapsody'"
    )
    bot.reply_to(message, welcome_text)
    logger.info(f"–ù–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: @{message.from_user.username}")

@bot.message_handler(func=lambda message: True)
def handle_search(message):
    logger.info(f"–ü–æ–∏—Å–∫ –æ—Ç @{message.from_user.username}: '{message.text}'")
    
    try:
        search_result = client.search(message.text)
        
        if not search_result or not search_result.tracks:
            bot.reply_to(message, "üîç –ù–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ. –ü–æ–ø—Ä–æ–±—É–π –¥—Ä—É–≥–æ–π –∑–∞–ø—Ä–æ—Å.")
            return

        
        user_search_results[message.chat.id] = search_result.tracks.results[:5]  

        
        markup = types.InlineKeyboardMarkup()
        for idx, track in enumerate(user_search_results[message.chat.id]):
            duration = str(datetime.timedelta(milliseconds=track.duration_ms))[2:7] if track.duration_ms else ""
            artists = ', '.join(artist.name for artist in track.artists)
            btn_text = f"{idx+1}. {track.title} - {artists} {duration}"
            
            markup.add(types.InlineKeyboardButton(
                text=btn_text,
                callback_data=f"track_{idx}"
            ))

        bot.send_message(
            message.chat.id,
            "üéß –ù–∞–π–¥–µ–Ω–Ω—ã–µ —Ç—Ä–µ–∫–∏:",
            reply_markup=markup
        )

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞: {str(e)}")
        bot.reply_to(message, "‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ. –ü–æ–ø—Ä–æ–±—É–π –ø–æ–∑–∂–µ.")

@bot.callback_query_handler(func=lambda call: call.data.startswith('track_'))
def send_audio(call):
    try:
        track_index = int(call.data.split('_')[1])
        tracks = user_search_results.get(call.message.chat.id)
        
        if not tracks or track_index >= len(tracks):
            bot.answer_callback_query(call.id, "‚ùå –¢—Ä–µ–∫ –±–æ–ª—å—à–µ –Ω–µ –¥–æ—Å—Ç—É–ø–µ–Ω")
            return

        track = tracks[track_index]
        artists = ', '.join(artist.name for artist in track.artists)
        
        
        bot.answer_callback_query(call.id, "‚è≥ –ó–∞–≥—Ä—É–∂–∞—é —Ç—Ä–µ–∫...")

        
        download_info = track.get_download_info(get_direct_links=True)
        if not download_info:
            bot.answer_callback_query(call.id, "üö´ –≠—Ç–æ—Ç —Ç—Ä–µ–∫ –Ω–µ–ª—å–∑—è —Å–∫–∞—á–∞—Ç—å")
            return
            
        
        best_quality = max(download_info, key=lambda x: x.bitrate_in_kbps)
        
        
        filename = f"temp_{call.message.chat.id}_{track.id}.mp3"
        track.download(filename, codec='mp3', bitrate_in_kbps=best_quality.bitrate_in_kbps)
        
        
        with open(filename, 'rb') as audio_file:
            bot.send_audio(
                chat_id=call.message.chat.id,
                audio=audio_file,
                title=track.title,
                performer=artists,
                duration=int(track.duration_ms/1000) if track.duration_ms else None
            )
        
        logger.info(f"–û—Ç–ø—Ä–∞–≤–ª–µ–Ω —Ç—Ä–µ–∫: {artists} - {track.title} –¥–ª—è @{call.from_user.username}")

    except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏: {str(e)}")
            bot.answer_callback_query(call.id, f"‚ö†Ô∏è –û—à–∏–±–∫–∞: {str(e)}", show_alert=True)
    finally:
            
            if 'filename' in locals() and os.path.exists(filename):
                os.remove(filename)

    logger.info("–ó–∞–ø—É—Å–∫ –º—É–∑—ã–∫–∞–ª—å–Ω–æ–≥–æ –±–æ—Ç–∞...")
    try:
        bot.polling(none_stop=True, interval=1)
    except Exception as e:
        logger.error(f"–ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: {str(e)}")

        
bot.polling(none_stop=True)
